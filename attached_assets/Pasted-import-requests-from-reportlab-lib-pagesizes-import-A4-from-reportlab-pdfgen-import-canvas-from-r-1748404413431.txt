import requests
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib.units import inch

# --- CONFIG --- #
GOOGLE_MAPS_API_KEY = "YOUR_GOOGLE_MAPS_API_KEY"
# (Consider using environment variables for security!)
AUCKLAND_PROPERTY_API = "https://services.arcgis.com/6T5r5Gd2hAdqQdPt/arcgis/rest/services/Property_Parcels/FeatureServer/0/query"

# --- 1️⃣ Geocode the address to get lat/lon --- #
def geocode_address(address):
    geocode_url = "https://maps.googleapis.com/maps/api/geocode/json"
    params = {"address": address, "key": GOOGLE_MAPS_API_KEY}
    
    response = requests.get(geocode_url, params=params)
    if response.status_code == 200:
        data = response.json()
        if data["results"]:
            location = data["results"][0]["geometry"]["location"]
            return location["lat"], location["lng"]
    return None, None

# --- 2️⃣ Query Auckland Council API for property zone --- #
def query_zone_data(lat, lon):
    # Example: Use a small buffer to find intersecting features
    geometry = f"{lon},{lat}"
    params = {
        "geometry": geometry,
        "geometryType": "esriGeometryPoint",
        "inSR": "4326",
        "spatialRel": "esriSpatialRelIntersects",
        "outFields": "*",
        "f": "geojson"
    }
    response = requests.get(AUCKLAND_PROPERTY_API, params=params)
    if response.status_code == 200:
        data = response.json()
        if data["features"]:
            # Get the first matching feature's attributes
            feature = data["features"][0]["properties"]
            return feature
    return {}

# --- 3️⃣ Get an aerial image from Google Maps Static API --- #
def get_aerial_image(lat, lon, filename):
    static_map_url = "https://maps.googleapis.com/maps/api/staticmap"
    params = {
        "center": f"{lat},{lon}",
        "zoom": "18",
        "size": "600x400",
        "maptype": "satellite",
        "key": GOOGLE_MAPS_API_KEY
    }
    response = requests.get(static_map_url, params=params)
    if response.status_code == 200:
        with open(filename, 'wb') as f:
            f.write(response.content)

# --- 4️⃣ Create a PDF report --- #
def create_pdf_report(address, property_data, map_filename, pdf_filename):
    c = canvas.Canvas(pdf_filename, pagesize=A4)
    
    c.setFont("Helvetica-Bold", 16)
    c.drawString(50, 800, "Property Feasibility Report")
    
    c.setFont("Helvetica", 12)
    c.drawString(50, 770, f"Address: {address}")
    c.drawString(50, 750, f"Zone: {property_data.get('Zone', 'Unknown')}")
    c.drawString(50, 730, f"Lot Number: {property_data.get('LotNumber', 'Unknown')}")
    c.drawString(50, 710, f"DP Number: {property_data.get('DPNumber', 'Unknown')}")
    
    c.drawString(50, 690, "Aerial Image:")
    c.drawImage(map_filename, 50, 450, width=5*inch, height=3*inch)
    
    c.showPage()
    c.save()

# --- 5️⃣ Main function to run it all --- #
def generate_property_report(address):
    lat, lon = geocode_address(address)
    if not lat or not lon:
        print("Error: Could not geocode the address.")
        return
    
    property_data = query_zone_data(lat, lon)
    map_filename = "aerial_image.png"
    pdf_filename = "property_report.pdf"
    
    get_aerial_image(lat, lon, map_filename)
    create_pdf_report(address, property_data, map_filename, pdf_filename)
    
    print(f"✅ Report generated: {pdf_filename}")

# --- Run Example --- #
if __name__ == "__main__":
    address = "39 Vaughans Road, Okura, Auckland"
    generate_property_report(address)