The API collections (datasets) may have different names than assumed. Run this discovery script first:
pythonimport requests

def discover_collections():
    base_url = "https://data-aucklandcouncil.opendata.arcgis.com/api/search/v1"
    
    try:
        response = requests.get(f"{base_url}/collections")
        if response.status_code == 200:
            collections = response.json()
            print("Available Collections:")
            for collection in collections.get('collections', []):
                print(f"- ID: {collection.get('id')}")
                print(f"  Title: {collection.get('title')}")
                print(f"  Description: {collection.get('description', 'N/A')}")
                print()
        else:
            print(f"Failed to fetch collections: {response.status_code}")
    except Exception as e:
        print(f"Error: {e}")

discover_collections()
Step 2: Update Collection IDs
After discovering the actual collection IDs, update the collections dictionary in the AucklandPropertyAgent class:
pythonself.collections = {
    'property_parcels': 'actual-property-collection-id',
    'zoning': 'actual-zoning-collection-id',
    'rates': 'actual-rates-collection-id',
    # ... etc
}
Step 3: Add Geocoding Service (Optional)
For address-to-coordinates conversion, you can integrate:
Option A: Google Maps Geocoding API
pythonimport googlemaps

def geocode_address(self, address: str) -> Optional[Tuple[float, float]]:
    gmaps = googlemaps.Client(key='YOUR_API_KEY')
    geocode_result = gmaps.geocode(f"{address}, Auckland, New Zealand")
    
    if geocode_result:
        location = geocode_result[0]['geometry']['location']
        return (location['lat'], location['lng'])
    return None
Option B: Free Nominatim (OpenStreetMap)
pythondef geocode_address(self, address: str) -> Optional[Tuple[float, float]]:
    url = "https://nominatim.openstreetmap.org/search"
    params = {
        'q': f"{address}, Auckland, New Zealand",
        'format': 'json',
        'limit': 1
    }
    
    response = requests.get(url, params=params)
    if response.status_code == 200:
        results = response.json()
        if results:
            return (float(results[0]['lat']), float(results[0]['lon']))
    return None
Usage Examples
Basic Property Search
pythonfrom main import AucklandPropertyAgent

agent = AucklandPropertyAgent()

# Search by address
properties = agent.search_property("123 Queen Street, Auckland")

for prop in properties:
    print(agent.format_property_report(prop))
Batch Processing
pythonaddresses = [
    "1 Aotea Square, Auckland",
    "50 Mayoral Drive, Auckland",
    "100 Symonds Street, Auckland"
]

for address in addresses:
    print(f"\n=== {address} ===")
    properties = agent.search_property(address)
    
    if properties:
        # Just show the first result
        print(agent.format_property_report(properties[0]))
    else:
        print("No property found")
Custom Query Function
pythondef get_property_summary(address: str) -> dict:
    agent = AucklandPropertyAgent()
    properties = agent.search_property(address)
    
    if properties:
        prop = properties[0]  # Take first result
        return {
            'address': prop.address,
            'zoning': prop.zoning,
            'land_area': prop.land_area,
            'capital_value': prop.capital_value,
            'suburb': prop.suburb
        }
    return {}

# Usage
summary = get_property_summary("456 Ponsonby Road")
print(f"Property Value: ${summary.get('capital_value', 0):,.2f}")