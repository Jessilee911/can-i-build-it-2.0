<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Property Consultation System</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }

        .container {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            padding: 40px;
            max-width: 800px;
            width: 100%;
            min-height: 600px;
            position: relative;
            overflow: hidden;
        }

        .container::before {
            content: '';
            position: absolute;
            top: -2px;
            left: -2px;
            right: -2px;
            bottom: -2px;
            background: linear-gradient(45deg, #667eea, #764ba2, #667eea);
            border-radius: 22px;
            z-index: -1;
            opacity: 0.8;
        }

        .agent-header {
            text-align: center;
            margin-bottom: 30px;
            position: relative;
        }

        .agent-title {
            font-size: 2.5em;
            font-weight: 700;
            background: linear-gradient(135deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 10px;
        }

        .agent-subtitle {
            color: #666;
            font-size: 1.1em;
            font-weight: 300;
        }

        .form-group {
            margin-bottom: 25px;
        }

        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #333;
        }

        input[type="text"], textarea {
            width: 100%;
            padding: 15px;
            border: 2px solid #e1e5e9;
            border-radius: 12px;
            font-size: 16px;
            transition: all 0.3s ease;
            font-family: inherit;
        }

        input[type="text"]:focus, textarea:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
            transform: translateY(-2px);
        }

        textarea {
            resize: vertical;
            min-height: 120px;
        }

        .button {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 15px 30px;
            border: none;
            border-radius: 12px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
            position: relative;
            overflow: hidden;
        }

        .button:hover {
            transform: translateY(-3px);
            box-shadow: 0 10px 25px rgba(102, 126, 234, 0.4);
        }

        .button:active {
            transform: translateY(-1px);
        }

        .button:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        .location-display {
            background: linear-gradient(135deg, #f8f9ff, #e8eaff);
            padding: 20px;
            border-radius: 12px;
            margin: 20px 0;
            border-left: 4px solid #667eea;
        }

        .chat-container {
            background: #f8f9fa;
            border-radius: 12px;
            padding: 20px;
            margin: 20px 0;
            max-height: 400px;
            overflow-y: auto;
            border: 2px solid #e1e5e9;
        }

        .chat-message {
            margin-bottom: 15px;
            padding: 12px 16px;
            border-radius: 18px;
            max-width: 85%;
            animation: slideIn 0.3s ease;
        }

        .user-message {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            margin-left: auto;
            text-align: right;
        }

        .agent-message {
            background: white;
            border: 2px solid #e1e5e9;
            color: #333;
        }

        .agent-message.typing {
            position: relative;
        }

        .typing-indicator {
            display: inline-block;
        }

        .typing-indicator span {
            height: 8px;
            width: 8px;
            background: #667eea;
            border-radius: 50%;
            display: inline-block;
            margin: 0 2px;
            animation: typing 1.4s infinite ease-in-out;
        }

        .typing-indicator span:nth-child(1) {
            animation-delay: -0.32s;
        }

        .typing-indicator span:nth-child(2) {
            animation-delay: -0.16s;
        }

        .zone-info {
            background: linear-gradient(135deg, #e8f5e8, #f0f8f0);
            padding: 15px;
            border-radius: 10px;
            margin: 15px 0;
            border-left: 4px solid #28a745;
        }

        .regulation-info {
            background: linear-gradient(135deg, #fff3cd, #ffeaa7);
            padding: 15px;
            border-radius: 10px;
            margin: 15px 0;
            border-left: 4px solid #ffc107;
        }

        .consent-required {
            background: linear-gradient(135deg, #f8d7da, #f5c6cb);
            padding: 15px;
            border-radius: 10px;
            margin: 15px 0;
            border-left: 4px solid #dc3545;
        }

        .consent-not-required {
            background: linear-gradient(135deg, #d1ecf1, #bee5eb);
            padding: 15px;
            border-radius: 10px;
            margin: 15px 0;
            border-left: 4px solid #17a2b8;
        }

        .hidden {
            display: none;
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @keyframes typing {
            0%, 80%, 100% {
                transform: scale(0);
            }
            40% {
                transform: scale(1);
            }
        }

        .property-summary {
            background: linear-gradient(135deg, #e3f2fd, #bbdefb);
            padding: 20px;
            border-radius: 12px;
            margin: 20px 0;
            border-left: 4px solid #2196f3;
        }

        .chat-input-area {
            display: flex;
            gap: 10px;
            margin-top: 15px;
        }

        .chat-input {
            flex: 1;
        }

        .send-button {
            padding: 15px 20px;
            white-space: nowrap;
        }
    </style>
</head>
<body>
    <!-- Agent 1: Location Confirmation -->
    <div id="agent1" class="container">
        <div class="agent-header">
            <h1 class="agent-title">Property Assistant</h1>
            <p class="agent-subtitle">Step 1: Confirm Your Property Location</p>
        </div>

        <div class="form-group">
            <label for="userName">Your Name:</label>
            <input type="text" id="userName" placeholder="Enter your full name" required>
        </div>

        <div class="form-group">
            <label for="propertyAddress">Property Address:</label>
            <input type="text" id="propertyAddress" placeholder="Enter your property address" required>
        </div>

        <div id="locationDisplay" class="location-display hidden">
            <h3>üìç Confirm This Location:</h3>
            <p id="confirmedAddress"></p>
            <p><strong>Coordinates:</strong> <span id="coordinates"></span></p>
            <p><strong>Zone:</strong> <span id="baseZone"></span></p>
        </div>

        <button id="searchLocation" class="button" onclick="searchLocation()">
            Search Location
        </button>

        <button id="confirmLocation" class="button hidden" onclick="proceedToAgent2()">
            Confirm Location & Continue
        </button>
    </div>

    <!-- Agent 2: Property Consultation -->
    <div id="agent2" class="container hidden">
        <div class="agent-header">
            <h1 class="agent-title">Property Consultation</h1>
            <p class="agent-subtitle">Personalized Planning & Building Code Guidance</p>
        </div>

        <div class="property-summary">
            <h3>üëã Welcome, <span id="welcomeName"></span>!</h3>
            <p><strong>Property:</strong> <span id="propertyLocation"></span></p>
            <p><strong>Zone:</strong> <span id="propertyZone"></span></p>
        </div>

        <div class="form-group">
            <label for="projectDescription">Describe your planned project:</label>
            <textarea id="projectDescription" placeholder="Please describe the works you want to undertake at your property. Be as specific as possible (e.g., 'I want to build a 20m¬≤ carport', 'I'm planning to add a bedroom extension', etc.)"></textarea>
        </div>

        <button id="startConsultation" class="button" onclick="startConsultation()">
            Start Property Consultation
        </button>

        <div id="chatContainer" class="chat-container hidden">
            <div id="chatMessages"></div>
            <div class="chat-input-area">
                <textarea id="chatInput" class="chat-input" placeholder="Ask me anything about your project requirements..." rows="2"></textarea>
                <button id="sendMessage" class="button send-button" onclick="sendMessage()">Send</button>
            </div>
        </div>
    </div>

    <script>
        // Global variables to store user data
        let userData = {
            name: '',
            address: '',
            coordinates: '',
            zone: '',
            projectDescription: ''
        };

        // Building code database (simplified for demo)
        const buildingRegulations = {
            carport: {
                maxAreaWithoutConsent: 40, // m¬≤
                maxHeightWithoutConsent: 6, // meters
                setbackRequirements: "1m from boundaries",
                consentRequired: (area, height) => area > 40 || height > 6
            },
            extension: {
                maxAreaWithoutConsent: 25, // m¬≤
                maxHeightWithoutConsent: 4, // meters
                setbackRequirements: "1m from side boundaries, 3m from rear",
                consentRequired: (area, height) => area > 25 || height > 4
            },
            deck: {
                maxAreaWithoutConsent: 30, // m¬≤
                maxHeightWithoutConsent: 1.5, // meters
                setbackRequirements: "1m from boundaries",
                consentRequired: (area, height) => area > 30 || height > 1.5
            },
            shed: {
                maxAreaWithoutConsent: 40, // m¬≤
                maxHeightWithoutConsent: 4, // meters
                setbackRequirements: "1m from boundaries",
                consentRequired: (area, height) => area > 40 || height > 4
            }
        };

        // Zone information database
        const zoneInformation = {
            'Residential': {
                description: 'General residential area with standard building rules',
                buildingCoverage: '35% maximum site coverage',
                heightLimit: '8m maximum building height',
                setbacks: 'Standard residential setbacks apply',
                specialRules: 'Density controls apply for subdivisions'
            },
            'Commercial': {
                description: 'Commercial and business activities permitted',
                buildingCoverage: '80% maximum site coverage',
                heightLimit: '12m maximum building height',
                setbacks: 'Reduced setbacks permitted',
                specialRules: 'Parking requirements apply'
            },
            'Industrial': {
                description: 'Light industrial and manufacturing activities',
                buildingCoverage: '70% maximum site coverage',
                heightLimit: '15m maximum building height',
                setbacks: 'Larger setbacks from residential zones',
                specialRules: 'Environmental performance standards'
            },
            'Rural': {
                description: 'Rural activities and limited residential',
                buildingCoverage: '10% maximum site coverage',
                heightLimit: '10m maximum building height',
                setbacks: 'Large setbacks required',
                specialRules: 'Agricultural building exemptions may apply'
            }
        };

        function searchLocation() {
            const address = document.getElementById('propertyAddress').value;
            const name = document.getElementById('userName').value;
            
            if (!address || !name) {
                alert('Please enter both your name and property address.');
                return;
            }

            // Simulate API call for location search
            setTimeout(() => {
                // Mock coordinates and zone data
                const mockCoords = `${(-43.5321 + Math.random() * 0.1).toFixed(4)}, ${(172.6362 + Math.random() * 0.1).toFixed(4)}`;
                const zones = ['Residential', 'Commercial', 'Industrial', 'Rural'];
                const mockZone = zones[Math.floor(Math.random() * zones.length)];

                userData.name = name;
                userData.address = address;
                userData.coordinates = mockCoords;
                userData.zone = mockZone;

                document.getElementById('confirmedAddress').textContent = address;
                document.getElementById('coordinates').textContent = mockCoords;
                document.getElementById('baseZone').textContent = mockZone;

                document.getElementById('locationDisplay').classList.remove('hidden');
                document.getElementById('confirmLocation').classList.remove('hidden');
                document.getElementById('searchLocation').textContent = 'Search Again';
            }, 1500);
        }

        function proceedToAgent2() {
            document.getElementById('agent1').classList.add('hidden');
            document.getElementById('agent2').classList.remove('hidden');

            // Populate Agent 2 with user data
            document.getElementById('welcomeName').textContent = userData.name;
            document.getElementById('propertyLocation').textContent = userData.address;
            document.getElementById('propertyZone').textContent = userData.zone;
        }

        function startConsultation() {
            const description = document.getElementById('projectDescription').value;
            
            if (!description) {
                alert('Please describe your planned project first.');
                return;
            }

            userData.projectDescription = description;
            
            document.getElementById('chatContainer').classList.remove('hidden');
            document.getElementById('startConsultation').style.display = 'none';
            
            // Start the consultation with zone information and project analysis
            setTimeout(() => {
                addAgentMessage(getInitialConsultationResponse());
            }, 1000);
        }

        function getInitialConsultationResponse() {
            const zoneInfo = zoneInformation[userData.zone];
            const projectAnalysis = analyzeProject(userData.projectDescription);
            
            let response = `Thank you for describing your project, ${userData.name}. Let me provide you with specific information about your property and project requirements.\n\n`;
            
            // Zone information
            response += `**PROPERTY ZONE INFORMATION:**\n`;
            response += `Your property is in a ${userData.zone} zone. Here are the key planning rules:\n`;
            response += `‚Ä¢ ${zoneInfo.description}\n`;
            response += `‚Ä¢ Building Coverage: ${zoneInfo.buildingCoverage}\n`;
            response += `‚Ä¢ Height Limit: ${zoneInfo.heightLimit}\n`;
            response += `‚Ä¢ Setbacks: ${zoneInfo.setbacks}\n`;
            response += `‚Ä¢ Special Rules: ${zoneInfo.specialRules}\n\n`;
            
            // Project-specific analysis
            response += projectAnalysis;
            
            response += `\n\nFeel free to ask me specific questions about your project, building consent requirements, or any other planning matters!`;
            
            return response;
        }

        function analyzeProject(description) {
            const lowerDesc = description.toLowerCase();
            let analysis = `**PROJECT ANALYSIS:**\n`;
            
            // Extract dimensions if mentioned
            const areaMatch = description.match(/(\d+)\s*m[¬≤2]|(\d+)\s*square\s*met/i);
            const area = areaMatch ? parseInt(areaMatch[1] || areaMatch[2]) : null;
            
            const heightMatch = description.match(/(\d+)\s*m(?:eter)?s?\s*high|height.*?(\d+)\s*m/i);
            const height = heightMatch ? parseInt(heightMatch[1] || heightMatch[2]) : null;
            
            // Determine project type
            let projectType = null;
            let regulations = null;
            
            if (lowerDesc.includes('carport')) {
                projectType = 'carport';
                regulations = buildingRegulations.carport;
            } else if (lowerDesc.includes('extension') || lowerDesc.includes('addition')) {
                projectType = 'extension';
                regulations = buildingRegulations.extension;
            } else if (lowerDesc.includes('deck')) {
                projectType = 'deck';
                regulations = buildingRegulations.deck;
            } else if (lowerDesc.includes('shed')) {
                projectType = 'shed';
                regulations = buildingRegulations.shed;
            }
            
            if (regulations) {
                analysis += `Based on your ${projectType} project:\n\n`;
                
                if (area && height) {
                    const needsConsent = regulations.consentRequired(area, height);
                    if (needsConsent) {
                        analysis += `‚ùå **BUILDING CONSENT REQUIRED**\n`;
                        analysis += `Your ${area}m¬≤ ${projectType} at ${height}m height exceeds the permitted limits.\n`;
                    } else {
                        analysis += `‚úÖ **NO BUILDING CONSENT REQUIRED**\n`;
                        analysis += `Your ${area}m¬≤ ${projectType} at ${height}m height meets permitted activity standards.\n`;
                    }
                } else if (area) {
                    const needsConsent = area > regulations.maxAreaWithoutConsent;
                    if (needsConsent) {
                        analysis += `‚ùå **BUILDING CONSENT LIKELY REQUIRED**\n`;
                        analysis += `Your ${area}m¬≤ ${projectType} exceeds the ${regulations.maxAreaWithoutConsent}m¬≤ limit for permitted activities.\n`;
                    } else {
                        analysis += `‚úÖ **NO BUILDING CONSENT REQUIRED (for area)**\n`;
                        analysis += `Your ${area}m¬≤ ${projectType} is within the ${regulations.maxAreaWithoutConsent}m¬≤ permitted limit.\n`;
                    }
                } else {
                    analysis += `**CONSENT REQUIREMENTS:**\n`;
                    analysis += `‚Ä¢ No consent needed if under ${regulations.maxAreaWithoutConsent}m¬≤ and ${regulations.maxHeightWithoutConsent}m high\n`;
                    analysis += `‚Ä¢ Building consent required if exceeding these limits\n`;
                }
                
                analysis += `\n**OTHER REQUIREMENTS:**\n`;
                analysis += `‚Ä¢ Setback Requirements: ${regulations.setbackRequirements}\n`;
                analysis += `‚Ä¢ Maximum Height (no consent): ${regulations.maxHeightWithoutConsent}m\n`;
                analysis += `‚Ä¢ Maximum Area (no consent): ${regulations.maxAreaWithoutConsent}m¬≤\n`;
            } else {
                analysis += `I've noted your project description. For specific consent requirements, please provide more details about the type of work (e.g., carport, extension, deck, shed) and dimensions if known.\n`;
            }
            
            return analysis;
        }

        function addAgentMessage(message, isTyping = false) {
            const chatMessages = document.getElementById('chatMessages');
            const messageDiv = document.createElement('div');
            messageDiv.className = 'chat-message agent-message';
            
            if (isTyping) {
                messageDiv.classList.add('typing');
                messageDiv.innerHTML = '<div class="typing-indicator"><span></span><span></span><span></span></div>';
            } else {
                // Format message with proper line breaks and styling
                const formattedMessage = message
                    .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
                    .replace(/\n/g, '<br>')
                    .replace(/^‚Ä¢ /gm, '‚Ä¢ ')
                    .replace(/^‚ùå/gm, '<span style="color: #dc3545;">‚ùå</span>')
                    .replace(/^‚úÖ/gm, '<span style="color: #28a745;">‚úÖ</span>');
                
                messageDiv.innerHTML = formattedMessage;
            }
            
            chatMessages.appendChild(messageDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;
            
            return messageDiv;
        }

        function addUserMessage(message) {
            const chatMessages = document.getElementById('chatMessages');
            const messageDiv = document.createElement('div');
            messageDiv.className = 'chat-message user-message';
            messageDiv.textContent = message;
            chatMessages.appendChild(messageDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        function sendMessage() {
            const input = document.getElementById('chatInput');
            const message = input.value.trim();
            
            if (!message) return;
            
            addUserMessage(message);
            input.value = '';
            
            // Show typing indicator
            const typingMessage = addAgentMessage('', true);
            
            // Generate response
            setTimeout(() => {
                typingMessage.remove();
                const response = generateResponse(message);
                addAgentMessage(response);
            }, 2000);
        }

        function generateResponse(userMessage) {
            const lowerMessage = userMessage.toLowerCase();
            
            // Handle specific questions
            if (lowerMessage.includes('consent') && lowerMessage.includes('need')) {
                return analyzeConsentRequirement(userMessage);
            } else if (lowerMessage.includes('setback') || lowerMessage.includes('boundary')) {
                return getSetbackInformation();
            } else if (lowerMessage.includes('height') && lowerMessage.includes('limit')) {
                return getHeightInformation();
            } else if (lowerMessage.includes('zone') || lowerMessage.includes('planning')) {
                return getZoneInformation();
            } else if (lowerMessage.includes('coverage') || lowerMessage.includes('site coverage')) {
                return getSiteCoverageInformation();
            } else {
                return getGeneralResponse(userMessage);
            }
        }

        function analyzeConsentRequirement(message) {
            // Extract project details from the message
            const areaMatch = message.match(/(\d+)\s*m[¬≤2]|(\d+)\s*square/i);
            const area = areaMatch ? parseInt(areaMatch[1] || areaMatch[2]) : null;
            
            let response = `**CONSENT REQUIREMENT ANALYSIS:**\n\n`;
            
            if (area) {
                response += `For a ${area}m¬≤ structure:\n\n`;
                
                Object.keys(buildingRegulations).forEach(type => {
                    const reg = buildingRegulations[type];
                    const needsConsent = area > reg.maxAreaWithoutConsent;
                    
                    if (needsConsent) {
                        response += `‚ùå **${type.toUpperCase()}**: Consent required (exceeds ${reg.maxAreaWithoutConsent}m¬≤ limit)\n`;
                    } else {
                        response += `‚úÖ **${type.toUpperCase()}**: No consent needed (within ${reg.maxAreaWithoutConsent}m¬≤ limit)\n`;
                    }
                });
            } else {
                response += `Here are the general consent thresholds for common structures:\n\n`;
                response += `**NO CONSENT REQUIRED IF:**\n`;
                response += `‚Ä¢ Carport: Under 40m¬≤ and 6m height\n`;
                response += `‚Ä¢ Extension: Under 25m¬≤ and 4m height\n`;
                response += `‚Ä¢ Deck: Under 30m¬≤ and 1.5m height\n`;
                response += `‚Ä¢ Shed: Under 40m¬≤ and 4m height\n\n`;
                response += `**ALWAYS REQUIRED:**\n`;
                response += `‚Ä¢ Meet setback requirements\n`;
                response += `‚Ä¢ Comply with site coverage limits\n`;
                response += `‚Ä¢ Not exceed height limits for your zone\n`;
            }
            
            response += `\nWould you like me to analyze a specific project size?`;
            return response;
        }

        function getSetbackInformation() {
            const zoneInfo = zoneInformation[userData.zone];
            return `**SETBACK REQUIREMENTS:**\n\n` +
                   `**Zone Rules:** ${zoneInfo.setbacks}\n\n` +
                   `**Common Structure Setbacks:**\n` +
                   `‚Ä¢ Carports: ${buildingRegulations.carport.setbackRequirements}\n` +
                   `‚Ä¢ Extensions: ${buildingRegulations.extension.setbackRequirements}\n` +
                   `‚Ä¢ Decks: ${buildingRegulations.deck.setbackRequirements}\n` +
                   `‚Ä¢ Sheds: ${buildingRegulations.shed.setbackRequirements}\n\n` +
                   `Note: These are minimum requirements. Some zones may have stricter rules.`;
        }

        function getHeightInformation() {
            const zoneInfo = zoneInformation[userData.zone];
            return `**HEIGHT INFORMATION:**\n\n` +
                   `**Zone Limit:** ${zoneInfo.heightLimit}\n\n` +
                   `**Permitted Activity Heights (no consent needed):**\n` +
                   `‚Ä¢ Carports: Up to ${buildingRegulations.carport.maxHeightWithoutConsent}m\n` +
                   `‚Ä¢ Extensions: Up to ${buildingRegulations.extension.maxHeightWithoutConsent}m\n` +
                   `‚Ä¢ Decks: Up to ${buildingRegulations.deck.maxHeightWithoutConsent}m\n` +
                   `‚Ä¢ Sheds: Up to ${buildingRegulations.shed.maxHeightWithoutConsent}m\n\n` +
                   `Anything higher requires building consent and must still comply with your zone's height limit.`;
        }

        function getZoneInformation() {
            const zoneInfo = zoneInformation[userData.zone];
            return `**YOUR PROPERTY ZONE: ${userData.zone.toUpperCase()}**\n\n` +
                   `**Description:** ${zoneInfo.description}\n\n` +
                   `**Key Rules:**\n` +
                   `‚Ä¢ Building Coverage: ${zoneInfo.buildingCoverage}\n` +
                   `‚Ä¢ Height Limit: ${zoneInfo.heightLimit}\n` +
                   `‚Ä¢ Setbacks: ${zoneInfo.setbacks}\n` +
                   `‚Ä¢ Special Rules: ${zoneInfo.specialRules}\n\n` +
                   `These rules apply to all development on your property. Would you like me to explain how they affect your specific project?`;
        }

        function getSiteCoverageInformation() {
            const zoneInfo = zoneInformation[userData.zone];
            return `**SITE COVERAGE RULES:**\n\n` +
                   `**Your Zone Limit:** ${zoneInfo.buildingCoverage}\n\n` +
                   `Site coverage includes all buildings and structures with roofs, including:\n` +
                   `‚Ä¢ Main dwelling\n` +
                   `‚Ä¢ Garages and carports\n` +
                   `‚Ä¢ Sheds and outbuildings\n` +
                   `‚Ä¢ Covered decks and patios\n\n` +
                   `**Important:** You need to calculate the total coverage of all existing and proposed structures to ensure you don't exceed the limit.\n\n` +
                   `Would you like help calculating your site coverage?`;
        }

        function getGeneralResponse(message) {
            return `Thank you for your question about "${message}". \n\n` +
                   `I can help you with specific information about:\n` +
                   `‚Ä¢ Building consent requirements\n` +
                   `‚Ä¢ Setback and height limits\n` +
                   `‚Ä¢ Zone-specific planning rules\n` +
                   `‚Ä¢ Site coverage calculations\n` +
                   `‚Ä¢ Permitted activity standards\n\n` +
                   `Could you please be more specific about what aspect of your ${userData.projectDescription} project you'd like me to address?`;
        }

        // Allow Enter key to send messages
        document.getElementById('chatInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            }
        });
    </script>
</body>
</html>